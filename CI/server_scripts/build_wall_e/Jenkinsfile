pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    stages {
        stage('Validate Formatting') {
            steps {
                sh('''
export ENVIRONMENT=TEST;
export COMPOSE_PROJECT_NAME=TEST_${BRANCH_NAME};

export POSTGRES_DB_USER=postgres;
export POSTGRES_DB_DBNAME=postgres;
export WALL_E_DB_USER=wall_e;
export WALL_E_DB_DBNAME=csss_discord_db;

export CONTAINER_HOME_DIR=/usr/src/app;
export CONTAINER_TEST_DIR=\${CONTAINER_HOME_DIR}/tests;
export CONTAINER_SRC_DIR=\${CONTAINER_HOME_DIR}/src;

export LOCALHOST_SRC_DIR=${WORKSPACE}/wall_e/src/;
export LOCALHOST_TEST_DIR=test_results;
export TEST_RESULT_FILE_NAME=all-unit-tests.xml;
export LOCALHOST_TEST_DIR=${WORKSPACE}/\${LOCALHOST_TEST_DIR};

export DOCKER_TEST_IMAGE=\${COMPOSE_PROJECT_NAME}_wall_e_pytest;
export DOCKER_TEST_CONTAINER=\${COMPOSE_PROJECT_NAME}_pytest;
export DISCORD_NOTIFICATION_MESSAGE_FILE=OUTPUT;

./CI/test_config_files/validate_line_endings.sh;
./CI/server_scripts/build_wall_e/validate_formatting.sh;
                ''')
            }
        }
        stage('Deploy To Test Guild'){
            steps {
                withCredentials([string(credentialsId: 'WALL_E_STAGING_DISCORD_BOT_TOKEN', variable: 'WALL_E_STAGING_DISCORD_BOT_TOKEN'),
                string(credentialsId: 'MEE6_AUTHORIZATION', variable: 'MEE6_AUTHORIZATION'),
                string(credentialsId: 'WOLFRAM_API_TOKEN', variable: 'WOLFRAM_API_TOKEN')]) {
                    sh('''
export CONTAINER_HOME_DIR=/usr/src/app;
export basic_config__ENVIRONMENT=TEST;
export basic_config__BRANCH_NAME=${BRANCH_NAME};
export basic_config__COMPOSE_PROJECT_NAME=TEST_\${BRANCH_NAME};
export COMPOSE_PROJECT_NAME=TEST_\${BRANCH_NAME};

export POSTGRES_DB_USER=postgres;
export POSTGRES_DB_DBNAME=postgres;
export POSTGRES_PASSWORD=postgresPassword;

export database_config__WALL_E_DB_USER=wall_e;
export database_config__WALL_E_DB_DBNAME=csss_discord_db;
export database_config__WALL_E_DB_PASSWORD=wallEPassword;
export basic_config__WOLFRAM_API_TOKEN=${WOLFRAM_API_TOKEN};
export basic_config__MEE6_AUTHORIZATION=${MEE6_AUTHORIZATION};
export basic_config__TOKEN=${WALL_E_STAGING_DISCORD_BOT_TOKEN};
export DISCORD_NOTIFICATION_MESSAGE_FILE=OUTPUT;

./CI/server_scripts/build_wall_e/deploy_to_staging_discord_guild.sh;
                    ''')
                }
            }
        }

        stage('Deploy to PROD Guild') {
            when {
                branch 'master'
            }
            steps {
                withCredentials([string(credentialsId: 'WALL_E_PROD_DISCORD_BOT_TOKEN', variable: 'WALL_E_PROD_DISCORD_BOT_TOKEN'),
                string(credentialsId: 'WOLFRAM_API_TOKEN', variable: 'WOLFRAM_API_TOKEN'),
                string(credentialsId: 'MEE6_AUTHORIZATION', variable: 'MEE6_AUTHORIZATION'),
                string(credentialsId: 'POSTGRES_PASSWORD', variable: 'POSTGRES_PASSWORD'),
                string(credentialsId: 'WALL_E_DB_PASSWORD', variable: 'WALL_E_DB_PASSWORD'),
                usernamePassword(credentialsId: 'docker-hub-perms',passwordVariable: 'DOCKER_HUB_PASSWORD',usernameVariable: 'DOCKER_HUB_USER_NAME'),
                string(credentialsId: 'SFU_CSSS_GMAIL_USERNAME', variable: 'SFU_CSSS_GMAIL_USERNAME'),
                string(credentialsId: 'SFU_CSSS_GMAIL_PASSWORD', variable: 'SFU_CSSS_GMAIL_PASSWORD'),
                string(credentialsId: 'BOT_MANAGER_EMAIL', variable: 'BOT_MANAGER_EMAIL')]) {
                    sh('''
export basic_config__ENVIRONMENT=PRODUCTION;
export basic_config__BRANCH_NAME=${BRANCH_NAME};
export basic_config__COMPOSE_PROJECT_NAME=PRODUCTION_MASTER;
export COMPOSE_PROJECT_NAME=PRODUCTION_MASTER;

export CONTAINER_HOME_DIR=/usr/src/app;
export LOCAL_PATH_TO_SRC_DIR=wall_e/src/;

export DOCKER_HUB_PASSWORD=${DOCKER_HUB_PASSWORD};
export DOCKER_HUB_USER_NAME=${DOCKER_HUB_USER_NAME};

export POSTGRES_DB_USER=postgres;
export POSTGRES_DB_DBNAME=postgres;
export POSTGRES_PASSWORD=${POSTGRES_PASSWORD};

export database_config__WALL_E_DB_USER=wall_e;
export database_config__WALL_E_DB_DBNAME=csss_discord_db;
export database_config__WALL_E_DB_PASSWORD=${WALL_E_DB_PASSWORD};

export basic_config__WOLFRAM_API_TOKEN=${WOLFRAM_API_TOKEN};
export basic_config__MEE6_AUTHORIZATION=${MEE6_AUTHORIZATION};
export basic_config__TOKEN=${WALL_E_PROD_DISCORD_BOT_TOKEN};

export gmail__username=${SFU_CSSS_GMAIL_USERNAME};
export gmail__password=${SFU_CSSS_GMAIL_PASSWORD};
export gmail__BOT_MANAGER_EMAIL=${BOT_MANAGER_EMAIL};

export DISCORD_NOTIFICATION_MESSAGE_FILE=OUTPUT;

./CI/server_scripts/build_wall_e/deploy_to_prod_discord_guild.sh;
                    ''')
                }
            }
        }
    }
    post {
        always {
            script {
                if (fileExists('test_results/all-unit-tests.xml')){
                    junit 'test_results/all-unit-tests.xml'
                }
                def summary = ''
                if (fileExists('OUTPUT')){
                    summary=readFile('OUTPUT').trim()
                    theTitle = "ISSUE DETECTED"
                    status = false
                }else{
                    if (currentBuild.currentResult == "SUCCESS"){
                        theTitle = "SUCCESS"
                        summary = "No issues detected"
                        status = true
                    }else{
                        theTitle = "ISSUE DETECTED"
                        summary = "Please look at Jenkins for more info"
                        status = false
                    }
                }

                withCredentials([string(credentialsId: 'DISCORD_WEBHOOK', variable: 'WEBHOOKURL')]) {
                    discordSend description: "Branch or PR Name: " + BRANCH_NAME + '\n' + summary, footer: env.GIT_COMMIT, link: env.BUILD_URL, successful: status, title: theTitle, webhookURL: '$WEBHOOKURL'
                }
            }
            cleanWs(
            cleanWhenAborted: true,
            cleanWhenFailure: true,
            cleanWhenNotBuilt: false,
            cleanWhenSuccess: true,
            cleanWhenUnstable: true,
            deleteDirs: true,
            disableDeferredWipeout: true
        )
        }
    }
}
