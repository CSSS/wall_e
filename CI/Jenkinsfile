pipeline {
    agent any
    options {
        disableConcurrentBuilds()
    }
    stages {
        stage('Validate Formatting') {
            steps {
                sh label: '', script: """bash -c \'
                    export ENVIRONMENT=TEST;
                    export COMPOSE_PROJECT_NAME=TEST_${BRANCH_NAME};

                    export POSTGRES_DB_USER=postgres;
                    export POSTGRES_DB_DBNAME=postgres;
                    export WALL_E_DB_USER=wall_e;
                    export WALL_E_DB_DBNAME=csss_discord_db;

                    export CONTAINER_HOME_DIR=/usr/src/app;
                    export CONTAINER_TEST_DIR=\${CONTAINER_HOME_DIR}/tests;
                    export CONTAINER_SRC_DIR=\${CONTAINER_HOME_DIR}/src;

                    export LOCALHOST_SRC_DIR=${WORKSPACE}/wall_e/src/;
                    export LOCALHOST_TEST_DIR=test_results;
                    export TEST_RESULT_FILE_NAME=all-unit-tests.xml;
                    export LOCALHOST_TEST_DIR=${WORKSPACE}/\${LOCALHOST_TEST_DIR};

                    export DOCKER_TEST_IMAGE=\${COMPOSE_PROJECT_NAME}_wall_e_pytest;
                    export DOCKER_TEST_CONTAINER=\${COMPOSE_PROJECT_NAME}_pytest;

                    ./wall_e/test/validate-formatting.sh;
                \'"""
            }
        }
        stage('Create New Docker Image'){
            steps {
                withCredentials([usernamePassword(credentialsId: 'docker-hub-perms', passwordVariable: 'DOCKER_HUB_PASSWORD', usernameVariable: 'DOCKER_HUB_USER_NAME')]) {
                    sh label: '', script : """bash -c \'
                        export CONTAINER_HOME_DIR=/usr/src/app;
                        export LOCAL_PATH_TO_SRC_DIR=wall_e/src/;
                        export DOCKER_HUB_PASSWORD=${DOCKER_HUB_PASSWORD};
                        export DOCKER_HUB_USER_NAME=${DOCKER_HUB_USER_NAME};
                        ./CI/create-docker-image.sh
                    \'"""
                }
            }
        }
        stage('Deploy To Test Guild'){
            steps {
                withCredentials([string(credentialsId: 'DISCORD_DEV_TOKEN', variable: 'TOKEN')]) {
                    sh label: '', script: """bash -c \'
                        export ENVIRONMENT=TEST;
                        export BRANCH_NAME=${BRANCH_NAME};
                        export COMPOSE_PROJECT_NAME=TEST_\${BRANCH_NAME};
                        export POSTGRES_DB_USER=postgres;
                        export POSTGRES_DB_DBNAME=postgres;
                        export WALL_E_DB_USER=wall_e;
                        export WALL_E_DB_DBNAME=csss_discord_db;
                        export POSTGRES_PASSWORD=postgresPassword;
                        export WALL_E_DB_PASSWORD=wallEPassword;
                        export TOKEN=${TOKEN};

                        ./CI/deploy-to-test-server.sh;
                    \'"""
                }
            }
        }
        stage('Deploy to PROD Guild') {
          when {
            branch 'master'
          }
          steps {
          sh label: '', script: """bash -c \'
              export ENVIRONMENT=PRODUCTION;
              export COMPOSE_PROJECT_NAME=PRODUCTION_MASTER;

              export POSTGRES_DB_USER=postgres;
              export POSTGRES_DB_DBNAME=postgres;
              export WALL_E_DB_USER=wall_e;
              export WALL_E_DB_DBNAME=csss_discord_db;

              export CONTAINER_HOME_DIR=/usr/src/app;
              export CONTAINER_TEST_DIR=\${CONTAINER_HOME_DIR}/tests;
              export CONTAINER_SRC_DIR=\${CONTAINER_HOME_DIR}/src;

              export LOCALHOST_SRC_DIR=${WORKSPACE}/wall_e/src/;
              export LOCALHOST_TEST_DIR=test_results;
              export TEST_RESULT_FILE_NAME=all-unit-tests.xml;
              export LOCALHOST_TEST_DIR=${WORKSPACE}/\${LOCALHOST_TEST_DIR};

              export DOCKER_TEST_IMAGE=\${COMPOSE_PROJECT_NAME}_wall_e_pytest;
              export DOCKER_TEST_CONTAINER=\${COMPOSE_PROJECT_NAME}_pytest;

              export POSTGRES_PASSWORD=postgresPassword;
              export WALL_E_DB_PASSWORD=wallEPassword;

              export BOT_LOG_CHANNEL=dem_logs;
              export REMINDER_CHANNEL=bot_commands_and_misc;

              ./CI/deploy-to-prod-server.sh;
          \'"""
          }
        }
    }
  post {
    always {
        script {
            junit 'test_results/all-unit-tests.xml'
            //withCredentials([string(credentialsId: 'DISCORD_WEBHOOK', variable: 'WEBHOOKURL')]) {
            //    discordSend description: BRANCH_NAME, footer: env.GIT_COMMIT, link: env.BUILD_URL, successful: true, title: 'Successful build', webhookURL: "$WEBHOOKURL"
            //}
        }
    }
}
}
