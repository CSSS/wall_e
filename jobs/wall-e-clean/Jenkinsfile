node {
   stage('Cleanup Branch') {
    withCredentials([string(credentialsId: 'TEST_BOT_USER_TOKEN', variable: 'TOKEN')]) {
      def object = readJSON text: "${payload}"
      def branchName = object.ref
      def resp = httpRequest customHeaders:
        [[maskValue: true, name: 'Authorization', value: "Bot ${TOKEN}"]],
        url: 'https://discordapp.com/api/users/@me/guilds'
      def guilds = resp.getContent()
      def guildObject = readJSON text: guilds
      def guildId = guildObject[0].id
      resp = httpRequest customHeaders:
        [[maskValue: true, name: 'Authorization', value: "Bot ${TOKEN}"]],
        url: "https://discordapp.com/api/guilds/${guildId}/channels"
      def channels = readJSON text: resp.getContent()
      def prChanId = channels.find{chan -> chan.name == "${branchName}"}.id
      def logChanId = channels.find{chan -> chan.name == "${branchName}_logs"}.id
      def reminderChanId = channels.find{chan -> chan.name == "${branchName}_reminders"}.id
      httpRequest customHeaders:
        [[maskValue: true, name: 'Authorization', value: "Bot ${TOKEN}"]],
        httpMode: 'DELETE', responseHandle: 'NONE',
        url: "https://discordapp.com/api/channels/${prChanId}"
      httpRequest customHeaders:
        [[maskValue: true, name: 'Authorization', value: "Bot ${TOKEN}"]],
        httpMode: 'DELETE', responseHandle: 'NONE',
        url: "https://discordapp.com/api/channels/${logChanId}"
      httpRequest customHeaders:
        [[maskValue: true, name: 'Authorization', value: "Bot ${TOKEN}"]],
        httpMode: 'DELETE', responseHandle: 'NONE',
        url: "https://discordapp.com/api/channels/${reminderChanId}"
      sh "docker rm -f TEST_${branchName}_wall_e TEST_${branchName}_wall_e_db"
    }
   }
}
